version: '3.8'

services:
  # Redis for Socket.IO adapter and caching
  redis:
    image: redis:7-alpine
    container_name: devlink-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - devlink-network

  # MongoDB
  mongodb:
    image: mongo:7
    container_name: devlink-mongodb
    # Remove port exposure in production for security
    # ports:
    #   - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME:-devlink_user}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-your_strong_mongodb_password}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-devlink}
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped
    networks:
      - devlink-network

  # Backend instance 1
  backend-1:
    build: ./backend
    container_name: devlink-backend-1
    ports:
      - "5000:5000"
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 5000
      INSTANCE_ID: backend-1
    depends_on:
      - mongodb
      - redis
    restart: unless-stopped
    networks:
      - devlink-network
    volumes:
      - ./backend/uploads:/app/uploads

  # Backend instance 2
  backend-2:
    build: ./backend
    container_name: devlink-backend-2
    ports:
      - "5001:5000"
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 5000
      INSTANCE_ID: backend-2
    depends_on:
      - mongodb
      - redis
    restart: unless-stopped
    networks:
      - devlink-network
    volumes:
      - ./backend/uploads:/app/uploads

  # Backend instance 3
  backend-3:
    build: ./backend
    container_name: devlink-backend-3
    ports:
      - "5002:5000"
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 5000
      INSTANCE_ID: backend-3
    depends_on:
      - mongodb
      - redis
    restart: unless-stopped
    networks:
      - devlink-network
    volumes:
      - ./backend/uploads:/app/uploads

  # Backend instance 4
  backend-4:
    build: ./backend
    container_name: devlink-backend-4
    ports:
      - "5003:5000"
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 5000
      INSTANCE_ID: backend-4
    depends_on:
      - mongodb
      - redis
    restart: unless-stopped
    networks:
      - devlink-network
    volumes:
      - ./backend/uploads:/app/uploads

  # Nginx load balancer
  nginx:
    image: nginx:alpine
    container_name: devlink-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/out:/var/www/html:ro
    depends_on:
      - backend-1
      - backend-2
      - backend-3
      - backend-4
    restart: unless-stopped
    networks:
      - devlink-network

  # Frontend (Next.js)
  frontend:
    build: ./frontend
    container_name: devlink-frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost/api
      NEXT_PUBLIC_SOCKET_URL: http://localhost
      NEXT_PUBLIC_LOAD_BALANCED: "true"
    depends_on:
      - nginx
    restart: unless-stopped
    networks:
      - devlink-network

volumes:
  redis_data:
  mongodb_data:

networks:
  devlink-network:
    driver: bridge
